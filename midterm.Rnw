\documentclass[10pt]{article}
\usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
\usepackage{amsmath}
\begin{document}
\title{STAT 405 Midterm Exam}
\author{Jordan Poles}
\maketitle
%\SweaveOpts{concordance=FALSE}
<<init, echo=FALSE>>=
  require(ggplot2);
  require(reshape2);
  require(microbenchmark);
@
\section*{Part 1}
\subsection*{Problem 1}
<<>>==
  A = rep(c(1,3,2,4), 4)
  dim(A) = c(4,4)
  A
  B = cbind(c(2,-1,0),c(-1, 2, -1),c(0,0,2))
  B
@
\subsubsection*{Q1}
<<>>==
  diag(B)
@
\subsubsection*{Q2}
<<>>==
  apply(B, 1, mean)
@
\subsubsection*{Q3}
Not a real matrix; DNE;
<<>>==
  sqrt(B)
@
\subsubsection*{Q4}
<<>>==
  row = A[3,]
  col = A[,3]
  row %*% col
@
\subsubsection*{Q5}
<<>>==
  A[,c(1,4)]
@
\subsubsection*{Q6}
<<>>==
  matrixExponentiation = function(A, power){
    decomp = eigen(A)
    V = decomp$vectors
    Vinv = solve(V)
    D = diag(decomp$values^power)
    return(V%*%(D)%*%Vinv)
  }
  matrixExponentiation(B, 6)
@
\subsubsection*{Q7}
<<>>==
    apply(A, 2, mean)
@
\subsubsection*{Q8}
<<>>==
  A[1,] %*% A[3,]
  A[3,] %*% A[4,]
  sum(A[1,] %*% A[3,], A[3,] %*% A[4,])
@
\subsubsection*{Q9}
<<>>==
  row = A[1,]
  col = A[,3]
  row * col
@
\subsubsection*{Q10}
<<>>==
  indexcomb = expand.grid(1:4, 1:4)
  indexcomb["sums"] = rowSums(indexcomb)
  even = function(x){return(x%%2 == 0);}
  evens = apply(indexcomb["sums"], 1, even)
  indexcomb["evens"] = evens;
  indexcomb["Avals"] = as.vector(A)
  indexcomb
  A[as.vector(evens)]
@
\subsection*{Problem 2}
<<>>==
  x = seq(0, 1, length.out = 100)
  dists = data.frame(
    x=x, 
    Normal=dnorm(x, mean=0, sd=.05),
    Exponential=dexp(x, 4),
    Beta=dbeta(x, 2,4),
    Gamma=dgamma(x,3,6)
  );
  colnames(dists) = c("x", "Normal(0,.05)", "Exp(4)", "Beta(2,4)", "Gamma(3,6)");
  meltdists = melt(dists, id.vars = x);
  colnames(meltdists) = c("x", "Distribution", "value")
  plot = ggplot(data=meltdists, aes(x=x, y=value, color=Distribution))+geom_line()
  plot = plot+xlim(0,1)+ylim(0,5)
  plot+xlab("X-Value")+ylab("Probability")+ggtitle("Density Plots of Various Probability Distributions\n")
@
\newpage
\section*{Part 2}
\subsection*{Problem 1}
\subsubsection*{Excessive Parenthesis}
<<>>=
  nreps = 100000;
  parenfuncs = c(
    function(){1 * 2 + 1 − 1},
    function(){1 * 2 + (1 − 1)},
    function(){(1 * 2) + (1 − 1)},
    function(){((1 * 2) + (1 − 1))},
    function(){((1 * 2) + (1 − 1))},
    function(){(((1 * 2) + (1 − 1)))},
    function(){((((1 * 2) + (1 − 1))))},
    function(){(((((1 * 2) + (1 − 1)))))}
  );
  speeds = data.frame()
  for(func in parenfuncs){
    speeds = rbind(speeds, system.time(replicate(nreps, func()))[3]);
  }
  speeds = cbind(0:(length(parenfuncs)-1), speeds);
  colnames(speeds) = c("numparens", "time")
  speeds
  ggplot(data=speeds, aes(x=numparens, y=time))+geom_line()+ggtitle("Excess parenthesis increase runtime\n");
@
\newpage
\subsubsection*{Order of Operations}
Create functions to be tested
<<>>=
  parens = function(){
    (3+(3-2))*(4-1) + (3*(2+4))
  }
  brackets = function(){
    {3+{3-2}}*{4-1} + {3*{2+4}}
  }
@
Run each function for a certain number of reps, record data
<<>>=
  reps = seq(10000, 50000, length.out=100);
  speedframe = data.frame(size=reps)
  parenspeeds = c()
  bracketspeeds = c()
  for(size in reps){
    parenspeeds = append(parenspeeds, system.time(replicate(size, parens()))[3]);
    bracketspeeds = append(bracketspeeds, system.time(replicate(size, brackets()))[3]);
  }
@
Examining the difference between the two functions (using T-test and plotting)
<<>>=
  t.test(parenspeeds, bracketspeeds, paired=TRUE)
  speedframe = cbind(speedframe, parenspeeds, bracketspeeds);
  speedmelt = melt(speedframe, id.vars="size");
  ggplot(data=speedmelt, aes(x=size, y=value, color=variable))+geom_line()
@
This problem may also be examined using the microbenchmark R package.
<<>>=
  bench = microbenchmark(parens(), brackets());
  boxplot(bench);
  autoplot(bench);
@
\newpage
\subsubsection*{Exponentiation}
<<>>=
  mult = function(size){
    prod(seq(size,size,length.out=size))
  }
  exp = function(size){
    size^size
  }
  reps = seq(100000, 1000000, length.out=15);
  speedframe = data.frame(size=reps)
  multpeeds = c()
  expspeeds = c()
  for(size in reps){
    multpeeds = append(multpeeds, system.time(mult(size))[3]);
    expspeeds = append(expspeeds, system.time(exp(size))[3]);
  }
  t.test(multpeeds, expspeeds, paired=TRUE)
  speedframe = cbind(speedframe, multpeeds, expspeeds);
  speedmelt = melt(speedframe, id.vars="size");
  ggplot(data=speedmelt, aes(x=size, y=value, color=variable))+geom_line()
@

\newpage
\subsection*{Problem 2}
<<>>==
  set.seed(123)
  carlosize = 10000
  dimsizes = 1:10
  propframe = data.frame()
  checkCoord = function(coord){
    sqsum = 0;
    for(i in coord){
      sqsum=sqsum+i^2;
    }
    return(sqsum<=1)
  }
  for(d in dimsizes){
    hits = 0;
    for(i in 1:carlosize){
      coord = runif(d, min = -1, max = 1);
      if(checkCoord(coord)){
        hits=hits+1;
      }
    }
    prop = hits/carlosize;
    propframe = rbind(propframe, c(d, prop))
  }
  colnames(propframe) = c("dim", "prop")
  propframe
  plot = ggplot(data=propframe, aes(x=dim, y=prop))+geom_line()
  plot = plot+ggtitle("Proprtion of space occupied by d-dimensional hyper-sphere\nin a d-dimensional hypercube as determined by Monte Carlo\n")
  plot = plot+ylab("Proportion occupied\n ")+xlab("\nDimension")
  plot+scale_x_continuous(breaks = seq(1, 10, 1))
@
\end{document}